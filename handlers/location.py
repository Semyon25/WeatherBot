from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, User, CallbackQuery, Location
from typing import cast
from keyboards.main import main_keyboard
from keyboards.location import location_keyboard
from states.location import LocationStates
from services.weather import is_weather_available
from services.geo_location import get_city_from_coords
from db.database import get_session
import db.locations as locations_db

router = Router()

# -------------------------------
# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä: –≤—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
# -------------------------------
@router.message(F.text == "üìç –ò–∑–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é")
async def change_location(message: Message, state: FSMContext):
    user = cast(User, message.from_user)
    async with get_session() as session:
        locations = await locations_db.get_location_by_user_id(
            session=session,
            user_id=user.id
        )

    if len(locations) >= 5:
        text = (
            "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ 5 —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π.\n"
            "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é, —É–¥–∞–ª–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö:"
        )
    else:
        text = (
            "üìç –í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º\n"
            "‚Ä¢ –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìé\n\n"
            "‚ùå –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ª–æ–∫–∞—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë:"
        )
        # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 5
        await state.set_state(LocationStates.waiting_for_location)

    await message.answer(
        text=text,
        reply_markup=location_keyboard(locations)
    )

# -------------------------------
# –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
# -------------------------------
@router.callback_query(F.data.startswith("delete_location:"))
async def delete_location_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    if callback.data is None:
        return
    loc_to_delete = callback.data.split(":", 1)[1]
    
    async with get_session() as session:
        await locations_db.delete_user_location(
            session=session,
            user_id=user_id,
            location_name=loc_to_delete
        )
        locations = await locations_db.get_location_by_user_id(
            session=session,
            user_id=user_id
        )

    if isinstance(callback.message, Message):
        await callback.message.edit_reply_markup(reply_markup=location_keyboard(locations))
    await callback.answer(f"–õ–æ–∫–∞—Ü–∏—è ¬´{loc_to_delete}¬ª —É–¥–∞–ª–µ–Ω–∞")

# -------------------------------
# –û—Ç–º–µ–Ω–∞ (–≤—ã—Ö–æ–¥ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
# -------------------------------
@router.callback_query(F.data == "cancel")
async def cancel_location_change(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    if isinstance(callback.message, Message):
        await callback.message.delete()
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†", reply_markup=main_keyboard())
    await callback.answer()

# -------------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
# -------------------------------
@router.message(LocationStates.waiting_for_location, F.text)
async def add_location_by_text(message: Message, state: FSMContext):
    await state.clear()
    user = cast(User, message.from_user)
    city = message.text or ""
    await process_location_addition(user.id, city, message, state)

# -------------------------------
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ –≥–µ–æ
# -------------------------------
@router.message(LocationStates.waiting_for_location, F.location)
async def add_location_by_geo(message: Message, state: FSMContext):
    await state.clear()
    user = cast(User, message.from_user)
    if not message.location:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.", reply_markup=main_keyboard())
        return

    loc: Location = message.location
    city = await get_city_from_coords(loc.latitude, loc.longitude)
    if city is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏", reply_markup=main_keyboard())
        return

    await process_location_addition(user.id, city, message, state)

async def process_location_addition(user_id: int, city: str, message: Message, state: FSMContext):
    city = city.strip()
    if not city:
        await message.answer("‚ùå –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.", reply_markup=main_keyboard())
        return

    available = await is_weather_available(city)
    if not available:
        await message.answer(f"‚ùå –ü–æ–≥–æ–¥–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ¬´{city}¬ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", reply_markup=main_keyboard())
        return

    async with get_session() as session:
        res = await locations_db.add_user_location(
            session=session,
            user_id=user_id,
            location_name=city
        )
        if res:
            await message.answer(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è ¬´{city}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=main_keyboard())
            await state.clear()
        else:
            await message.answer(f"‚ùå –õ–æ–∫–∞—Ü–∏—è ¬´{city}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=main_keyboard())